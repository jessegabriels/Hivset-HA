blueprint:
  # Name of the blueprint
  name: Verwarming
  # Description what the blueprint does
  description: "Als het winters/koud weer is, moet de ♨️verwarming♨️ aan gaan op 
  basis van de temperatuur. In de automatisatie `'Warm/Koud weer'` heb je bepaald vanaf welke 
  temperatuur het winters/koud weer is. Deze kan je steeds aanpassen door op de 
  automatisatie te klikken en `🌡️Temperatuur Drempelwaarde🌡️` aan te passen."
  # Add a domain that indicates what kind of blueprint this is
  domain: automation
  # Configure all the inputs, these will display on the screen when the blueprint is selected
  input:
    # Ask user for the maximum temperature it can be in a room
    input_maximum_temperature:
      name: "🔥 Maximum Temperatuur 🔥"
      description:
        "Geef de maximum temperatuur mee. Als de temperatuur boven dit getal gaat, zal 
        de verwarming uit gaan."
      # Default to 24°C
      default: 24
      # Input requires a numeric value between 12°C and 40°C, when the indicators 
      # are used, it goes up or down in steps of 0,5°C
      selector:
        number:
          min: 12.0
          max: 30.0
          step: 0.5
          unit_of_measurement: "°C"
    
    # Ask user for the minimum temperature it can be in a room when there is no school
    input_minimum_temperature:
      name: "❄️ Minimum Temperatuur ❄️"
      description:
        "Geef de minimum temperatuur mee. Als de temperatuur onder dit getal zakt, zal
        de verwarming aan gaan. ⚠️ Dit is enkel voor als het GEEN SCHOOL is. ⚠️ "
      # Default to 12°C
      default: 12
      # Input requires a numeric value between 6°C and 25°C, when the indicators
      # are used, it goes up or down in steps of 0,5°C
      selector:
        number:
          min: 6.0
          max: 25.0
          step: 0.5
          unit_of_measurement: "°C"

    # Aks user for the minimum temperature it can be in a room when there is school
    input_minimum_temperature_school:
      name: "❄️ 🏫 Minimum Temperatuur School 🏫 ❄️"
      description:
        "Geef de minimum temperatuur mee. Als de temperatuur onder dit getal zakt, zal
        de verwarming aan gaan. ⚠️ Dit is enkel voor als het WEL SCHOOL is. ⚠️ "
      # Default to 18°C
      default: 18
      # Input requires a numeric value between 6°C and 25°C, when the indicators 
      # are used, it goes up or down in steps of 0,5°C
      selector:
        number:
          min: 6.0
          max: 25.0
          step: 0.5
          unit_of_measurement: "°C"

    # Ask user for the right temperature sensor. With Hivset this starts with
    # "TH Origin"
    input_tempsensor:
      name: "🌡️ Temperatuur Sensor 🌡️"
      description: "Selecteer het apparaat dat de temperatuur meet in een lokaal.
        De naam van dit apparaat start met `TH Origin` en eindigt op `SI7021 Temperature`."
      # Input requires a single entity from a dropdown menu.
      selector:
        entity:
          multiple: false

    # Ask user for the right switch that operates the heating. With Hivset this
    # starts with "switch.th_"
    input_heating:
      name: "♨️ Verwarming Schakelaar ♨️"
      description: "Selecteer het apparaat dat de verwarming aan of uit zet. 
      Dit start met `switch.th_` of `switch.4CH`"
      # Input requires a single entity from a dropdown menu.
      selector:
        entity:
          multiple: false

    # THIS INPUT CAN BE LEFT OUT SINCE HIVSET'S HOME ASSISTANT ALREADY HAS THIS 
    # ENTITY AND IS THE ONLY ONE PRESENT
    
    # Ask user for the right entity that represents if it is school or not.
    # This entity is a helper that is assigned by an other automation that is 
    # synced with the Google Calendar of Hivset

    #input_school:
    #  name: "🏫 School 🏫"
    #  description: "Selecteer de entiteit dat weergeeft of het school is of niet
    #    De entiteit start met `input_boolean.school`."
    #  # Input requires a single entity from a dropdown menu.
    #  selector:
    #    entity:
    #      multiple: false

    # Ask user for the right entity that represents if it is hot or cold outside.
    # This entity is a helper that is assigned by an other automation that uses the 
    # outside temperature and compares it with the given values from the user
    input_winter:
      name: "🌞-☃️ Warm/Koud Weer"
      description:
        "Zomer of Winter entiteit dat weergeeft of het buiten zomers of winters weer is.
        Dit kan ook geïnterpreteerd worden als `'Warm weer'` of `'Koud weer'`. Deze entiteit 
        moet worden aangemaakt met de automatisatie 'Warm/Koud Weer'."
      # Input requires a single entity from a dropdown menu.
      selector:
        entity:
          multiple: false
          domain: input_boolean

    # Ask user for the right entity that represents the correct Google Calendar for rent.
    # This entity is a helper that is assigned by an other automation that uses the google calender
    input_verhuur:
      name: "🏢 Verhuur 🏢"
      description:
        "Selectuur de juiste verhuur kalender. Dit kan voor de cafetaria, 
        sporthol of E- en H blok zijn. De verwarming zal een uur voor de start aangaan."
      selector:
        entity:
          multiple: false
          domain: input_boolean

    

# Specify what triggers this automation. In this case it is a time patern that 
# uses the input from the user "input_trigger_frequency"
trigger:
  platform: time_pattern
  id: temp_update
  minutes: "/1"

# Assign variables that will be used throughout the automation that use the 
# inputs from the user
variables:
  max_temperature_user: !input input_maximum_temperature
  min_temperature_user: !input input_minimum_temperature
  min_school_temperature_user: !input input_minimum_temperature_school
  current_temp: !input input_tempsensor
  #school: !input input_school
  school: input_boolean.school
  winter: !input input_winter
  verhuur: !input input_verhuur

# This automation does not require any other conditions to trigger
condition: []

# Specify the action that should run when the automation is triggered
action:
  - alias: "Heating"
    # Initialize different choices to make based on certain conditions
    choose:
      # Condition to check if the heating can turn OFF
      - conditions:
        - condition: or
          conditions:
            # check if the inside temperature is higher than the maximum allowed temperature
            # or check if the connection with the sensor is lost, in that case the measurements
            # will be shown as 'unknown'
          - condition: template
            value_template: "{{ is_state(current_temp, 'unknown') }}"
          - condition: template
            value_template: "{{ states(current_temp) | float > max_temperature_user }}"
          - condition: template
            value_template: "{{ is_state(winter, 'off') }}"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ is_state(school, 'off') }}"
              - condition: template
                value_template: "{{ is_state(verhuur, 'off') }}"
        # If "true", turn OFF the switch that controls the heating
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input input_heating

      # Condition to check if the heating can turn ON
      - conditions:
          # Check if 1 of the multiple conditions are true
          - condition: or
            conditions:
              # First AND condition that checks if the inside temperature is lower 
              # than the minimum temperature when it is school and if it is cold outside
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ states(current_temp) | float < min_school_temperature_user }}"
                  - condition: template
                    value_template: "{{ is_state(winter, 'on') }}"
                  - condition: template
                    value_template: "{{ is_state(school, 'on') }}"
                    
              # Second AND condition that check if the inside temperature is lower
              # than the minimum temperature when there is NO SCHOOL and if it is cold outside
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ states(current_temp) | float < min_temperature_user }}"
                  - condition: template
                    value_template: "{{ is_state(winter, 'on') }}"
                  - condition: template
                    value_template: "{{ is_state(school, 'off') }}"
              
              # Third AND condition that checks if the space is rented. And that the temperature
              # is lower than the minimum temperature.
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ is_state(verhuur, 'on') }}"
                  - condition: template
                    value_template: "{{ states(current_temp) | float < min_temperature_user }}"
                  - condition: template
                    value_template: "{{ is_state(winter, 'on') }}"

        # Turn OFF the heating switch when 1 condition is returned as "true"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input input_heating
