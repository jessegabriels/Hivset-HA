blueprint:
  name: Dag- en Nacht Koeling
  description: "Als het zomers/warm weer is, moet de ❄️koeling❄️ aan gaan op basis van 
  de temperatuur. In de automatisatie `'Warm/Koud weer'` heb je bepaald vanaf welke 
  temperatuur het zomers/warm weer is. Deze kan je steeds aanpassen door op de 
  automatisatie te klikken en `🌡️Temperatuur Drempelwaarde🌡️` aan te passen."
  domain: automation
  input:
    # Ask the user for the start time when the cooling should turn on during the night
    input_start:
      name: "⏱️▶️ Start NACHT ▶️⏱️"
      description: "Starttijd voor de `nachtkoeling`."
      default: "22:00:00"
      selector:
        time:
    
    # Ask the user for the stop time when the cooling should turn off during the night
    input_stop:
      name: "⏱️⏹️ Stop NACHT ⏹️⏱️"
      description: "Stoptijd voor de `nachtkoeling`."
      default: "06:00:00"
      selector:
        time:

    # Aks the user for the maximum allowed temperature it can be in a room during the day
    input_day_maximum_temperature:
      name: "🔥☀️ DAG Maximum Temperatuur ☀️🔥"
      description:
        "Geef de maximum temperatuur mee. Als de temperatuur boven dit getal gaat, zal
        de koeling aan gaan. Dit is enkel voor `overdag`. Dus niet tijdens de uren die je hierboven
        hebt ingegeven. Denk er wel aan dat de koeling enkel kan aangaan als de `buiten temperatuur
        lager is dan de binnen temperatuur`"
      default: 23
      selector:
        number:
          min: 18.0
          max: 30.0
          step: 0.5
          unit_of_measurement: "°C"

    # Ask the user for the minimum allowed temperature it can be in a room during the day
    input_day_minimum_temperature:
      name: "❄️☀️ DAG Minimum Temperatuur ☀️❄️"
      description:
        "Geef de minimum temperatuur mee. Als de temperatuur `overdag` onder dit getal zakt, zal
        de koeling uit gaan."
      default: 18
      selector:
        number:
          min: 15.0
          max: 25.0
          step: 0.5
          unit_of_measurement: "°C"

    # Ask the user for the maximum allowed temperature it can be in a room during the night
    input_night_maximum_temperature:
      name: "🔥🌙 NACHT Maximum Temperatuur 🌙🔥"
      description:
        "Geef de maximum temperatuur mee. Als de temperatuur boven dit getal gaat, zal
        de koeling aan gaan. Dit is enkel voor de `nacht`."
      default: 20
      selector:
        number:
          min: 10.0
          max: 30.0
          step: 0.5
          unit_of_measurement: "°C"

    # Aks the user for the minimum allowed temperature it can be in a room during the night
    input_night_minimum_temperature:
      name: "❄️🌙 NACHT Minimum Temperatuur 🌙❄️"
      description:
        "Geef de minimum temperatuur mee. Als de temperatuur onder dit getal zakt, zal
        de koeling uit gaan."
      default: 15
      selector:
        number:
          min: 10.0
          max: 20.0
          step: 0.5
          unit_of_measurement: "°C"

    # Ask user for the right entity that represents if it is hot or cold outside.
    # This entity is a helper that is assigned by an other automation that uses the 
    # outside temperature and compares it with the given values from the user
    input_winter:
      name: "🌞☃️ Warm/Koud Weer ☃️🌞"
      description: "Boolean die aangeeft of het buiten `Warm of Koud weer` is. 
      Dit bepaalt of de `dagkoeling` moet werken. Hier geef je de `helper` mee die je hebt
      aangemaakt voor de `automatisatie Warm/Koud Weer`"
      selector:
        entity:
          domain: input_boolean

    # Ask user for the right temperature sensor. With Hivset this starts with
    # "TH Origin"
    input_tempsensor:
      name: "🌡️ Temperatuur Sensor 🌡️"
      description: "Selecteer het apparaat dat de temperatuur meet in een lokaal.
        De naam van dit apparaat start met `TH Origin` en eindigt op `SI7021 Temperature`."
      selector:
        entity:
          multiple: false

    # Ask user for the right switch that operates the heating. With Hivset this
    # starts with "switch.th_"
    input_cooling:
      name: "❄️🔌 Koeling Schakelaar 🔌❄️"
      description: "Selecteer het apparaat dat de koeling aan of uit zet. 
      Dit start met `switch.th_` of `switch.4CH`"
      selector:
        entity:
          multiple: false
    
    # Ask the user for a temperature. When the temperature is expected to be higher 
    # than this input, the cooling will turn on during the night.
    input_next_day:
      name: "🌧️ ⛅ Voorspelling Volgende Dag ⛅ 🌧️"
      description: "Als het de volgende dag warmer wordt als deze temperatuur zal de 
      koeling aangaan in de nacht."
      default: 20
      selector:
        number:
          min: 15
          max: 40
          step: 0.5
          unit_of_measurement: "°C"

# Trigger this automation when the current time is the same as the input from 'stoptijd NACHT'
# This way the cooling will turn off after it leaves night mode. 
# The second trigger is a time patern of '/1'. This means this automation will run every minute
# and check the conditions
trigger:
  - platform: time
    at: !input input_stop
    id: stopnight
  - platform: time_pattern
    minutes: "/1"
    id: refresh

condition: []

variables:
  day_max_temp: !input input_day_maximum_temperature
  day_min_temp: !input input_day_minimum_temperature
  night_max_temp: !input input_night_maximum_temperature
  night_min_temp: !input input_night_minimum_temperature
  current_temp: !input input_tempsensor
  start_night: !input input_start
  stop_night: !input input_stop
  winter: !input input_winter
  next_cool_temp: !input input_next_day
  outside_temp: "{{ state_attr('weather.forecast_thuis', 'temperature') }}"
  #next_day: "{{ state_attr('weather.forecast_thuis', 'temperature') }}"
  next_day: "{{ state_attr('weather.forecast_apostoliekenstraat', 'forecast')[0].temperature }}"
  #weather.forecast_apostoliekenstraat

action:
  - choose:
      # Day cooling
      - conditions:
        # When it is hot weather (from automation Warm/Koud Weer) and the current time
        # is before the starttime and after the stoptime
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ is_state(winter, 'off') }}"
              - condition: time
                before: !input input_start
                after: !input input_stop
        sequence:
          - choose:
              # turn on when the current temperature is higher than the max allowed 
              # temperature and outside temperature is lower
              - conditions:
                  - condition: template
                    value_template: "{{ states(current_temp) | float > day_max_temp }}"
                  - condition: template
                    value_template: "{{ outside_temp < states(current_temp) | float }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: !input input_cooling
              # turn off when the current temperature is lower than the min allowed temperature
              - conditions:
                  - condition: template
                    value_template: "{{ states(current_temp) | float < day_min_temp }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: !input input_cooling
              # turn off when the outside temperature is higher than the inside temperature
              - conditions:
                  - condition: template
                    value_template: "{{ states(current_temp) | float > day_max_temp }}"
                  - condition: template
                    value_template: "{{ outside_temp > states(current_temp) | float }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: !input input_cooling
              # Turn off cooling at the end of the stop time
              - conditions:
                  - condition: trigger
                    id: stopnight
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: !input input_cooling
      # Night cooling
      - conditions:
          # When the current time is after the starttime and before the stoptime AND
          # if the forecasted temperature is higher than the user input
          - condition: and
            conditions:
              - condition: time
                after: !input input_start
                before: !input input_stop
              - condition: template
                value_template: "{{ next_day > next_cool_temp }}"
        sequence:
          - choose:
              # Turn on when the current temperature is higher than the maximum allowed 
              # temperature during the night
              - conditions:
                  - condition: template
                    value_template: "{{ states(current_temp) | float > night_max_temp }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: !input input_cooling
              # Turn off when the current temperature is lower than the minimum allowed 
              # temperature during the night.
              - conditions:
                  - condition: template
                    value_template: "{{ states(current_temp) | float < night_min_temp }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: !input input_cooling
      # Turn off when the measurement give 'unknown' as value
      - condition: template
        value_template: "{{ is_state(current_temp, 'unknown') }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input input_cooling
